---
/* 
todo : 
- chime
- complementary / analogous colours
- random theme
*/
---

<script is:inline>
  const fonts =
    'system,humanist,industrial,serif,geometric,rounded,mono-serif,mono-code,didone,antique,old-style,transitional'.split(
      ',',
    );

  function getTime() {
    const d = new Date();
    const h = d.getHours();
    const m = d.getMinutes();
    const s = d.getSeconds();
    return [h, m, s];
  }

  function display(h, m) {
    const _h = String(h).padStart(2, '0');
    const _m = String(m).padStart(2, '0');
    return `${_h}:${_m}`;
  }

  const defaults = {
    hue: 60,
    weight: 800,
    fontSize: 26,
  };

  const shufflePeriodOptions = ['off', 1, 5, 10, 15, 20, 60];

  const colorModes = ['pastel', 'colourful', 'B&W'];

  const pastelColors = (h) => {
    const a = `hsl(${h}, 100%, 85%)`;
    const b = `hsl(${(h + 360 - 25) % 360}, 60%, 35%)`;
    return [a, b];
  };

  const colourful = (h) => {
    const a = `hsl(${h}, 100%, 70%)`;
    const b = `hsl(${(h + 360 - 55) % 360}, 60%, 35%)`;
    return [a, b];
  };
  document.addEventListener('alpine:init', () => {
    Alpine.data('digital', () => ({
      time: ':',
      timer: null,
      showMenu: true,
      font: fonts[0],
      weight: defaults.weight,
      hue: defaults.hue,
      darkMode: false,
      colorMode: colorModes[0],
      fontSize: defaults.fontSize,
      shufflePeriod: shufflePeriodOptions[0],
      shuffleLast: null,
      isWakeLocked: false,
      wakeLock: null,
      get colors() {
        const h = parseInt(this.hue);
        let a, b;
        if (this.colorMode === 'pastel') [a, b] = pastelColors(h);
        if (this.colorMode === 'colourful') [a, b] = colourful(h);
        if (this.colorMode === 'B&W') {
          a = `hsl(${h}, 100%, 100%)`;
          b = `hsl(${h}, 100%, 0%)`;
        }
        const bg = this.darkMode ? b : a;
        const fg = this.darkMode ? a : b;
        return { bg: bg, text: fg };
      },
      init() {
        this.loop();
        this.font = localStorage.getItem('font') || fonts[0];
        this.weight = localStorage.getItem('weight') || defaults.weight;
        this.hue = localStorage.getItem('hue') || defaults.hue;
        this.colorMode = localStorage.getItem('colorMode') || defaults.colorMode;
        this.fontSize = localStorage.getItem('fontSize') || defaults.fontSize;
        this.shufflePeriod =
          localStorage.getItem('shufflePeriod') === 'off'
            ? 'off'
            : parseInt(localStorage.getItem('shufflePeriod') || shufflePeriodOptions[0]);
        this.darkMode = localStorage.getItem('darkMode') === 'true' || false;

        // sync storage
        Alpine.effect(() => {
          localStorage.setItem('font', this.font);
          localStorage.setItem('weight', this.weight);
          localStorage.setItem('hue', this.hue);
          localStorage.setItem('colorMode', this.colorMode);
          localStorage.setItem('fontSize', this.fontSize);
          localStorage.setItem('shufflePeriod', this.shufflePeriod);
          localStorage.setItem('darkMode', this.darkMode);
        });

        // restart on focus
        document.addEventListener('visibilitychange', () => {
          if (document.visibilityState === 'visible') {
            this.loop();
          }
        });
      },
      loop() {
        if (this.timer) clearTimeout(this.timer);
        const [h, m, s] = getTime();
        this.time = display(h, m);
        const rem = 60 - s;
        if (this.shufflePeriod !== 'off') {
          const t = Math.floor(m / this.shufflePeriod);
          if (t !== this.shuffleLast) {
            this.shuffleLast = t;
            this.hue = Math.floor(Math.random() * 360);
          }
        }

        this.timer = setTimeout(() => {
          this.loop();
        }, rem * 1000);
      },
      shuffle() {
        const f = Math.floor(Math.random() * (fonts.length - 1));
        const w = Math.floor(Math.random() * 9) * 100 + 100;
        this.font = fonts[f];
        this.weight = w;
        this.hue = Math.floor(Math.random() * 360);
      },
      toggleFullscreen() {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
        } else {
          document.exitFullscreen();
        }
      },
      toggleUnlocked() {
        if (this.wakeLock) {
          this.wakeLock.release();
          this.wakeLock = null;
        } else {
          navigator.wakeLock
            .request()
            .then((wakeLock) => {
              this.wakeLock = wakeLock;
              // this.wakeLock.addEventListener('release', () => {});
            })
            .catch(() => {
              this.isWakeLock = null;
            });
        }
      },
    }));
  });
</script>
<div class="relative h-screen" x-data="digital">
  <!-- Clock Display -->
  <div
    :class="`${font} h-screen w-full grid place-items-center overflow-hidden leading-none transition-colors duration-1000`"
    :style="`
        font-weight: ${weight};
        font-size: ${fontSize}vw;
        background-color: ${colors.bg};
        color: ${colors.text};`"
  >
    <span class="mb-[5vh]" x-text="time"></span>
  </div>

  <!-- Settings Button -->
  <div class="absolute top-3 right-3 z-10">
    <button
      @click="showMenu = !showMenu"
      class="p-4 text-xl bg-transparent border-none transition-transform hover:scale-110 z-10"
      aria-label="Settings"
      :style="`color: ${colors.text};`"
    >
      ...
    </button>
  </div>

  <!-- Settings Menu -->
  <div
    class="absolute w-[16rem] top-0 right-0 bg-[#fff8] rounded-lg p-4 shadow-lg z-20 flex flex-col gap-3 max-h-[calc(100vh-1.5rem)] overflow-y-auto text-xs text-gray-600"
    x-show="showMenu"
    @click.away="showMenu = false"
  >
    <!-- Shuffle Period Selector -->
    <div class="flex flex-col gap-1">
      <label for="shuffle-select" class=""> Change every: </label>
      <select
        id="shuffle-select"
        x-model="shufflePeriod"
        class="w-full px-2 py-1 border border-gray-600 rounded-md bg-transparent"
        x-init="$nextTick(() => { $el.value = shufflePeriod })"
      >
        <template x-for="period in shufflePeriodOptions" :key="period">
          <option :value="period" x-text="`${period} min`"></option>
        </template>
      </select>
    </div>
    <!-- custom -->

    <template x-if="shufflePeriod === 'off'">
      <div class="contents">
        <h3 class="font-bold">Font</h3>
        <!-- Font Selector -->
        <div class="">
          <label for="font-select" class="flex justify-between items-center mb-1"> Theme: </label>
          <select
            id="font-select"
            x-model="font"
            class="w-full px-2 py-1 border border-gray-600 rounded-md bg-transparent"
            x-init="$nextTick(() => { $el.value = font })"
          >
            <template x-for="f in fonts" :key="f">
              <option :value="f" x-text="f.charAt(0).toUpperCase() + f.slice(1)"></option>
            </template>
          </select>
        </div>

        <!-- Weight Slider -->
        <div class="">
          <label for="weight-slider" class="flex justify-between items-center">
            Weight: <span x-text="weight" class="font-mono"></span>
          </label>
          <input type="range" id="weight-slider" x-model="weight" min="100" max="900" step="100" />
        </div>

        <!-- Size Slider -->
        <div class="">
          <label for="size-slider" class="flex justify-between items-center">
            Size: <span x-text="fontSize + 'vw'" class="font-mono"></span>
          </label>
          <input type="range" id="size-slider" x-model="fontSize" min="20" max="45" step="1" />
        </div>

        <h3 class="font-bold">Color</h3>

        <!-- Hue Slider -->
        <div class="">
          <label for="hue-slider" class="flex justify-between items-center">
            Hue: <span x-text="hue + 'Â°'" class="font-mono"></span>
          </label>
          <input type="range" id="hue-slider" x-model="hue" min="0" max="360" step="1" />

          <div class="mt-4">
            <label for="color-mode" class="block text-sm font-medium mb-1">Color Mode</label>
            <select
              id="color-mode"
              class="w-full px-2 py-1 border border-gray-600 rounded-md bg-transparent"
              x-model="colorMode"
              x-init="$nextTick(() => { $el.value = colorMode })"
            >
              <template x-for="mode in  colorModes" :key="mode">
                <option :value="mode" x-text="mode"></option>
              </template>
            </select>
          </div>
        </div>

        <!-- Brightness  -->

        <!-- Dark Mode Toggle -->
        <div class="flex gap-2 items-center">
          <input type="checkbox" id="dark-mode" x-model="darkMode" class="" />
          <label for="dark-mode" class="">Dark Mode</label>
        </div>
      </div>

      <!--  -->
    </template>

    <button class="px-2 py-1 border border-gray-600 rounded-md" @click="toggleFullscreen()">Switch Fullscreen</button>

    <button
      class="px-2 py-1 border border-gray-600 rounded-md"
      @click="toggleUnlocked()"
      x-text="wakeLock ? 'Release screen lock' : 'Keep screen unlocked' "></button>
  </div>
</div>

<style>
  /* Fonts  */

  .system {
    font-family: system-ui, sans-serif;
  }
  .transitional {
    font-family: Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;
  }
  .old-style {
    font-family: 'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;
  }
  .humanist {
    font-family: Seravek, 'Gill Sans Nova', Ubuntu, Calibri, 'DejaVu Sans', source-sans-pro, sans-serif;
  }
  .geometric {
    font-family: Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;
  }
  .classical {
    font-family: Optima, Candara, 'Noto Sans', source-sans-pro, sans-serif;
  }
  .neo-grotesque {
    font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
  }
  .mono-serif {
    font-family: 'Nimbus Mono PS', 'Courier New', monospace;
  }
  .mono-code {
    font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
  }
  .industrial {
    font-family: Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed,
      sans-serif;
  }
  .rounded {
    font-family: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT',
      'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;
  }
  .serif {
    font-family: Rockwell, 'Rockwell Nova', 'Roboto Slab', 'DejaVu Serif', 'Sitka Small', serif;
  }
  .antique {
    font-family: Superclarendon, 'Bookman Old Style', 'URW Bookman', 'URW Bookman L', 'Georgia Pro', Georgia, serif;
  }
  .didone {
    font-family: Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;
  }
</style>
