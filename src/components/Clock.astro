---
import Digits from './Digits.astro';
import Clockmenu from './Clockmenu.astro';
/* 
todo : 
- chime
- complementary / analogous colours
- random theme
*/
---

<script is:inline>
  const fonts =
    'system,humanist,industrial,serif,geometric,rounded,mono-serif,mono-code,didone,antique,old-style,transitional'.split(
      ',',
    );
  const shufflePeriodOptions = ['off', 1, 5, 10, 15, 20, 60];
  const intervalOptions = ['off', 'hourly', 'quarterly'];
  const colorModes = ['pastel', 'colourful', 'B&W'];
  const chimeOptions = ['speak'];

  const pastelColors = (h) => {
    const a = `hsl(${h}, 100%, 85%)`;
    const b = `hsl(${(h + 360 - 25) % 360}, 60%, 35%)`;
    return [a, b];
  };

  const colourful = (h) => {
    const a = `hsl(${h}, 100%, 70%)`;
    const b = `hsl(${(h + 360 - 55) % 360}, 60%, 35%)`;
    return [a, b];
  };

  const defaults = {
    font: fonts[0],
    fontSize: 26,
    weight: 800,
    hue: 60,
    colorMode: colorModes[0],
    chime: chimeOptions[0],
    darkMode: false,
    shufflePeriod: shufflePeriodOptions[0],
    interval: intervalOptions[0],
  };

  document.addEventListener('alpine:init', () => {
    Alpine.data('digital', () => ({
      font: defaults.font,
      weight: defaults.weight,
      hue: defaults.hue,
      darkMode: defaults.darkMode,
      interval: defaults.interval,
      colorMode: defaults.colorMode,
      fontSize: defaults.fontSize,
      shufflePeriod: defaults.shufflePeriod,
      get colors() {
        const h = parseInt(this.hue);
        let a, b;
        if (this.colorMode === 'pastel') [a, b] = pastelColors(h);
        if (this.colorMode === 'colourful') [a, b] = colourful(h);
        if (this.colorMode === 'B&W') {
          a = `hsl(${h}, 100%, 100%)`;
          b = `hsl(${h}, 100%, 0%)`;
        }
        const bg = this.darkMode ? b : a;
        const fg = this.darkMode ? a : b;
        return { bg: bg, text: fg };
      },
      init() {
        this.font = localStorage.getItem('font') || defaults.font;
        this.weight = localStorage.getItem('weight') || defaults.weight;
        this.hue = localStorage.getItem('hue') || defaults.hue;
        this.colorMode = localStorage.getItem('colorMode') || defaults.colorMode;
        this.fontSize = localStorage.getItem('fontSize') || defaults.fontSize;
        this.interval = localStorage.getItem('interval') || defaults.interval;
        this.shufflePeriod =
          localStorage.getItem('shufflePeriod') === 'off'
            ? 'off'
            : parseInt(localStorage.getItem('shufflePeriod') || defaults.shufflePeriod);
        this.darkMode = localStorage.getItem('darkMode') === 'true' || false;

        // sync storage
        Alpine.effect(() => {
          localStorage.setItem('font', this.font);
          localStorage.setItem('weight', this.weight);
          localStorage.setItem('hue', this.hue);
          localStorage.setItem('interval', this.interval);
          localStorage.setItem('colorMode', this.colorMode);
          localStorage.setItem('fontSize', this.fontSize);
          localStorage.setItem('shufflePeriod', this.shufflePeriod);
          localStorage.setItem('darkMode', this.darkMode);
        });
      },
      shuffle() {
        const f = Math.floor(Math.random() * (fonts.length - 1));
        const w = Math.floor(Math.random() * 9) * 100 + 100;
        this.font = fonts[f];
        this.weight = w;
        this.hue = Math.floor(Math.random() * 360);
      },
    }));
  });
</script>
<div class="relative h-screen" x-data="digital">
  <!-- Clock Display -->
  <Digits />

  <!-- Menu -->
  <div x-data="{ showMenu: true }">
    <div class="absolute w-[calc(100%-2rem)] max-w-[60ch] top-4 right-4 overflow-auto" x-show="showMenu">
      <div @click.away="showMenu = false" class="bg-[#fff8] rounded-lg shadow-lg p-3">
        <Clockmenu />
      </div>
    </div>
    <button
      @click="showMenu = !showMenu"
      class="absolute top-3 right-3 p-4 text-xl bg-transparent border-none transition-transform hover:scale-110"
      aria-label="Settings"
      :style="`color: ${colors.text};`"
    >
      ...
    </button>
  </div>
</div>
