---

---

<script is:inline>
  function getTime() {
    const d = new Date();
    const h = d.getHours();
    const m = d.getMinutes();
    const s = d.getSeconds();
    return [h, m, s];
  }

  function display(h, m) {
    const _h = String(h).padStart(2, '0');
    const _m = String(m).padStart(2, '0');
    return `${_h}:${_m}`;
  }

  const noteMap = {
    C: 0,
    'C#': 1,
    DB: 1,
    D: 2,
    'D#': 3,
    EB: 3,
    E: 4,
    F: 5,
    'F#': 6,
    GB: 6,
    G: 7,
    'G#': 8,
    AB: 8,
    A: 9,
    'A#': 10,
    BB: 10,
    B: 11,
  };

  function noteToFrequency(note) {
    const match = note.toUpperCase().match(/^([A-G][#B]?)(\d+)$/);
    if (!match) return console.error(`Invalid note format: ${note}`);
    const [, noteName, octaveStr] = match;
    const octave = parseInt(octaveStr);
    const midiNumber = (octave + 1) * 12 + noteMap[noteName];
    const frequency = 440 * Math.pow(2, (midiNumber - 69) / 12);
    return frequency;
  }

  function playNotes(notes, staggerDelay = 0.1) {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();

    notes.forEach((note, index) => {
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      oscillator.frequency.value = noteToFrequency(note.note);
      oscillator.type = 'sine';

      const startTime = audioContext.currentTime + index * staggerDelay;
      const duration = note.duration || 2.0;

      gainNode.gain.setValueAtTime(0, startTime);
      gainNode.gain.linearRampToValueAtTime(0.2, startTime + 0.1);
      gainNode.gain.exponentialRampToValueAtTime(0.01, startTime + duration);

      oscillator.start(startTime);
      oscillator.stop(startTime + duration);
    });
  }

  function playChime() {
    playNotes(
      [
        { note: 'C4', duration: 0.5 },
        { note: 'E4', duration: 0.5 },
        { note: 'G4', duration: 0.5 },
      ],
      0.2,
    );
  }

  function speakTime(hour, minutes) {
    if (!('speechSynthesis' in window)) return;

    const hour12 = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
    const nextHour = hour12 === 12 ? 1 : hour12 + 1;
    let timeText = 'It is ';

    if (minutes === 0) {
      timeText += `${hour12} o'clock`;
    } else if (minutes === 15) {
      timeText += `quarter past ${hour12}`;
    } else if (minutes === 30) {
      timeText += `half past ${hour12}`;
    } else if (minutes === 45) {
      timeText += `quarter to ${nextHour}`;
    } else if (minutes < 40) {
      const mins = minutes === 1 ? 'minute' : 'minutes';
      timeText += `${minutes} ${mins} past ${hour12}`;
    } else {
      const minutesToNext = 60 - minutes;
      const mins = minutesToNext === 1 ? 'minute' : 'minutes';
      timeText += `${minutesToNext} ${mins} to ${nextHour}`;
    }

    const utterance = new SpeechSynthesisUtterance(timeText);
    utterance.rate = 0.8;
    utterance.pitch = 1;
    utterance.volume = 1;
    utterance.lang = 'en-GB';

    const voices = speechSynthesis.getVoices();
    const goodNews = voices.find((v) => v.name === 'Good News');
    const daniel = voices.find((v) => v.name.includes('Daniel'));

    if (goodNews) utterance.voice = goodNews;
    else if (daniel) utterance.voice = daniel;

    speechSynthesis.speak(utterance);
  }

  document.addEventListener('alpine:init', () => {
    Alpine.data('time', () => ({
      time: ':',
      timer: null,
      shuffleLast: null,
      lastChime: null,
      init() {
        this.loop();

        // restart on focus
        document.addEventListener('visibilitychange', () => {
          if (document.visibilityState === 'visible') {
            this.loop();
          }
        });
      },
      loop() {
        if (this.timer) clearTimeout(this.timer);
        const [h, m, s] = getTime();
        this.time = display(h, m);

        this.shuffleLoop(h, m);
        this.chimeLoop(h, m);

        const rem = 60 - s;
        this.timer = setTimeout(() => {
          this.loop();
        }, rem * 1000);
      },
      shuffleLoop(m) {
        if (this.shufflePeriod !== '0') {
          const t = Math.floor(m / this.shufflePeriod);
          if (this.shuffleLast === null) {
            this.shuffleLast = t;
            return;
          }
          if (t !== this.shuffleLast) {
            this.shuffleLast = t;
            this.hue = Math.floor(Math.random() * 360);
          }
        }
      },
      chimeLoop(h, m) {
        if (this.interval === '0') return;

        if (this.lastChime === null) {
          this.lastChime = m;
          return;
        }

        if (m === 0) {
          if (this.chime === 'speak') speakTime(h, m);
          if (this.chime === 'chime') playChime();
          return;
        }

        if (this.interval === '15') {
          if (m % 15 === 0) {
            if (this.chime === 'speak') speakTime(h, m);
            if (this.chime === 'chime') playChime();
            return;
          }
        }
        const intvl = parseInt(this.interval);
        if (m % intvl === 0) {
          if (this.chime === 'speak') speakTime(h, m);
          if (this.chime === 'chime') playChime();
          return;
        }
      },
    }));
  });
</script>

<div
  x-data="time"
  :class="`${font} h-screen w-full grid place-items-center overflow-hidden leading-none transition-colors duration-1000 select-none`"
  :style="`font-weight: ${weight}; font-size: ${fontSize}vw; background-color: ${colors.bg}; color: ${colors.text};`"
>
  <span class="mb-[5vh]" x-text="time"></span>
</div>
<style>
  /* Fonts  */

  .system {
    font-family: system-ui, sans-serif;
  }
  .transitional {
    font-family: Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;
  }
  .old-style {
    font-family: 'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;
  }
  .humanist {
    font-family: Seravek, 'Gill Sans Nova', Ubuntu, Calibri, 'DejaVu Sans', source-sans-pro, sans-serif;
  }
  .geometric {
    font-family: Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;
  }
  .classical {
    font-family: Optima, Candara, 'Noto Sans', source-sans-pro, sans-serif;
  }
  .neo-grotesque {
    font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
  }
  .mono-serif {
    font-family: 'Nimbus Mono PS', 'Courier New', monospace;
  }
  .mono-code {
    font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
  }
  .industrial {
    font-family: Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed,
      sans-serif;
  }
  .rounded {
    font-family: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT',
      'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;
  }
  .serif {
    font-family: Rockwell, 'Rockwell Nova', 'Roboto Slab', 'DejaVu Serif', 'Sitka Small', serif;
  }
  .antique {
    font-family: Superclarendon, 'Bookman Old Style', 'URW Bookman', 'URW Bookman L', 'Georgia Pro', Georgia, serif;
  }
  .didone {
    font-family: Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;
  }
</style>
